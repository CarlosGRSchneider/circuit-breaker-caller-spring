spring.application.name=circuit-breaker-caller-spring
management.endpoints.web.exposure.include=*
management.metrics.enable-all=true


base.service.url=http://localhost:9090


resilience4j.circuitbreaker.instances.circuitoAnimal.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitoAnimal.minimumNumberOfCalls=4
resilience4j.circuitbreaker.instances.circuitoAnimal.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.circuitoAnimal.waitDurationInOpenState=50000

resilience4j.circuitbreaker.instances.circuitoCalculadora.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitoCalculadora.slowCallDurationThreshold=1000
resilience4j.circuitbreaker.instances.circuitoCalculadora.slowCallRateThreshold=40


## Referências dos valores apresentados:
# slidingWindowSize = numero de requisições que o circuito irá acompanhar para determinar se abre e fecha ou não.
# minimumNumberOfCalls = numero de requisições que abrem o circuito caso falhem
# na configuração acima, o circuito irá falhar caso 4 requisições falhem em um bloco de 10 chamadas

# permittedNumberOfCallsInHalfOpenState = numero de requisições que serão realizadas no estado semi-aberto para decidir se o circuito fecha ou abre novamente
# waitDurationInOpenState = tempo (em milissegundos) em que o circuito fica aberto. Padrão 60.000

# slowCallDurationThreshold = duração maxima para resposta de um endpoint (em milissegundos). Se ultrapassar esse valor, o circuit breaker começa a contar erro
# slowCallRateThreshold = valor percentual maximo de chamadas que podem exceder a duração de resposta para abrir o circuito